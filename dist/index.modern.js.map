{"version":3,"file":"index.modern.js","sources":["../src/utils/object.js","../src/convertToPath.js","../src/applyProperties.js","../src/applyClasses.js","../src/applyTransforms.js","../src/walk.js","../src/stringify.js","../src/index.js"],"sourcesContent":["const assign =\n  Object.assign ||\n  function assign(source, ...targets) {\n    targets.forEach((target) => {\n      Object.keys(target).forEach((key) => {\n        source[key] = target[key];\n      });\n    });\n  };\n\nfunction cloneExcept(obj, props) {\n  let clone = {};\n  Object.keys(obj).forEach((prop) => {\n    if (!~props.indexOf(prop)) clone[prop] = obj[prop];\n  });\n  return clone;\n}\n\nexport { assign, cloneExcept };\n","import { cloneExcept } from \"./utils/object.js\";\n\nfunction line(points) {\n  let path = \"\";\n  let prefix = \"M\";\n\n  for (let i = 0; i < points.length; i += 2) {\n    path += `${prefix}${points[i]},${points[i + 1]}`;\n    prefix = \" \";\n  }\n\n  return path;\n}\n\nconst converters = {\n  ellipse: (properties) => {\n    const cx = properties.cx || 0;\n    const cy = properties.cy || 0;\n    const rx = properties.rx || 0;\n    const ry = properties.ry || 0;\n\n    const path = cloneExcept(properties, [\"cx\", \"cy\", \"rx\", \"ry\"]);\n    path.d = `M${cx - rx},${cy}a${rx},${ry} 0 1,0 ${\n      rx * 2\n    },0a${rx},${ry} 0 1,0 ${rx * -2},0`;\n\n    return path;\n  },\n\n  circle: (properties) => {\n    const cx = properties.cx || 0;\n    const cy = properties.cy || 0;\n    const r = properties.r || 0;\n\n    const path = cloneExcept(properties, [\"cx\", \"cy\", \"r\"]);\n    path.d = `M${cx - r},${cy}a${r},${r} 0 1,0 ${r * 2},0a${r},${r} 0 1,0 ${\n      r * -2\n    },0`;\n\n    return path;\n  },\n\n  polygon: (properties) => {\n    const path = converters.polyline(properties);\n    path.d += \"Z\";\n\n    return path;\n  },\n\n  polyline: (properties) => {\n    const path = cloneExcept(properties, \"points\");\n    path.d = line(properties.points.trim().split(/[\\s,]+/));\n\n    return path;\n  },\n\n  rect: (properties) => {\n    const x = +properties.x || 0;\n    const y = +properties.y || 0;\n    const width = +properties.width || 0;\n    const height = +properties.height || 0;\n    // const rx = +properties.rx || 0; // TODO handle...\n    // const ry = +properties.ry || 0; // TODO handle...\n\n    const path = cloneExcept(properties, [\n      \"x\",\n      \"y\",\n      \"width\",\n      \"height\",\n      \"rx\",\n      \"ry\",\n    ]);\n\n    // TODO handle rx and ry\n    path.d = `m${x},${y} ${width},0 0,${height} ${-width},0,0,${-height}Z`;\n\n    return path;\n  },\n\n  line: (properties) => {\n    const path = cloneExcept(properties, [\"x1\", \"y1\", \"x2\", \"y2\"]);\n    path.d = line([\n      properties.x1 || 0,\n      properties.y1 || 0,\n      properties.x2 || 0,\n      properties.y2 || 0,\n    ]);\n\n    return path;\n  },\n\n  // TODO others...\n};\n\nexport default function convert(node) {\n  const converter = converters[node.tagName];\n  if (converter) {\n    const properties = converter(node.properties);\n\n    return {\n      tagName: \"path\",\n      properties,\n    };\n  }\n\n  throw new Error(`TODO <${node.tagName}>`);\n}\n","import { assign } from \"./utils/object.js\";\n\nexport default function applyProperties(node, properties) {\n  node.properties = assign(properties, node.properties);\n}\n","import { assign } from \"./utils/object.js\";\n\nexport default function applyClasses(node, classes) {\n  if (node.properties.class) {\n    classes = assign({}, classes);\n\n    node.properties.class\n      .split(\" \")\n      .filter(Boolean)\n      .forEach((className) => (classes[className] = true));\n  }\n\n  const classList = Object.keys(classes).join(\" \");\n\n  if (classList) {\n    node.properties.class = classList;\n  }\n}\n","import svgpath from \"svgpath\";\n\nexport default function applyTransforms(node, transforms) {\n  if (node.properties.transform) {\n    transforms = transforms.concat(node.properties.transform);\n    delete node.properties.transform;\n  }\n\n  const transformString = transforms.join(\" \");\n\n  if (node.tagName === \"path\") {\n    node.properties.d = svgpath(node.properties.d)\n      .transform(transformString)\n      .round(10)\n      .toString();\n  } else if (transformString) {\n    node.properties.transform = transformString;\n  }\n}\n","import convertToPath from \"./convertToPath.js\";\nimport applyProperties from \"./applyProperties.js\";\nimport applyClasses from \"./applyClasses.js\";\nimport applyTransforms from \"./applyTransforms.js\";\nimport { assign, cloneExcept } from \"./utils/object.js\";\n\nconst ignore = [\"defs\", \"title\"];\nconst noninheritable = [\"id\", \"class\", \"style\", \"transform\"];\n\nexport default function walk(node, paths, transforms, classes, properties) {\n  if (node.tagName === \"svg\") {\n    const _transforms = transforms.slice();\n    node.children.forEach((child) => {\n      walk(\n        child,\n        paths,\n        _transforms,\n        assign({}, classes),\n        assign({}, properties)\n      );\n    });\n  } else if (node.tagName === \"g\") {\n    transforms = node.properties.transform\n      ? transforms.concat(node.properties.transform)\n      : transforms;\n\n    if (node.properties.class) {\n      node.properties.class\n        .split(\" \")\n        .filter(Boolean)\n        .forEach((className) => (classes[className] = true));\n    }\n\n    node.children.forEach((child) => {\n      const _classes = assign({}, classes);\n\n      const _properties = assign(\n        cloneExcept(properties, noninheritable),\n        cloneExcept(node.properties, noninheritable)\n      );\n\n      walk(child, paths, transforms, _classes, _properties);\n    });\n  } else if (~ignore.indexOf(node.tagName)) {\n    applyProperties(node, properties);\n    applyClasses(node, classes);\n    applyTransforms(node, transforms);\n    paths.push(node);\n  } else {\n    applyProperties(node, properties);\n    applyClasses(node, classes);\n\n    if (node.tagName !== \"path\") {\n      node = convertToPath(node);\n    }\n\n    applyTransforms(node, transforms);\n    paths.push(node);\n  }\n}\n","function stringifyProperties(properties) {\n  return Object.keys(properties)\n    .map((key) => ` ${key}=\"${properties[key]}\"`)\n    .join(\"\");\n}\n\nexport default function stringify(node, indent) {\n  if (typeof node === \"string\") return node;\n  // if (node.tagName === undefined) return \"\";\n\n  const properties = stringifyProperties(node.properties);\n  let str = `${indent}<${node.tagName}${properties}`;\n\n  if (node.children && node.children.length) {\n    str += \">\";\n    let prefix = \"\\n\";\n\n    for (let child of node.children) {\n      if (typeof child === \"string\") {\n        str += child;\n        prefix = \"\";\n      } else if (child.type === \"text\") {\n        str += child.value;\n        prefix = \"\";\n      } else {\n        str += prefix + stringify(child, indent + \"\\t\");\n        prefix = \"\\n\";\n      }\n    }\n\n    if (prefix) prefix += indent;\n\n    str += `${prefix}</${node.tagName}>`;\n  } else if (node.value) {\n    str += `>${node.value}</${node.tagName}>`;\n  } else {\n    str += \"/>\";\n  }\n\n  return str;\n}\n","import { parse as parseSvg } from \"svg-parser\";\nimport walk from \"./walk.js\";\nimport stringify from \"./stringify.js\";\n\nclass Pathologist {\n  constructor(source) {\n    this.source = parseSvg(source).children[0];\n\n    this.target = {\n      tagName: this.source.tagName,\n      properties: Object.assign({}, this.source.properties),\n      children: [],\n    };\n\n    walk(this.source, this.target.children, [], {}, {});\n  }\n\n  toString() {\n    return stringify(this.target, \"\");\n  }\n}\n\nexport function transform(source) {\n  return new Pathologist(source).toString();\n}\n\nexport function parse(source) {\n  const pathologist = new Pathologist(source);\n\n  return {\n    paths: pathologist.target.children\n      .filter((node) => node.tagName === \"path\")\n      .map((node) => node.properties),\n    toString() {\n      return pathologist.toString();\n    },\n  };\n}\n"],"names":["assign","Object","source","targets","forEach","target","keys","key","cloneExcept","obj","props","clone","prop","indexOf","line","points","path","prefix","i","length","converters","ellipse","properties","cx","cy","rx","ry","d","circle","r","polygon","polyline","trim","split","rect","x","y","width","height","x1","y1","x2","y2","applyProperties","node","applyClasses","classes","class","filter","Boolean","className","classList","join","applyTransforms","transforms","transform","concat","transformString","tagName","svgpath","round","toString","ignore","noninheritable","walk","paths","_transforms","slice","children","child","_classes","_properties","push","converter","Error","convertToPath","stringify","indent","map","stringifyProperties","str","type","value","Pathologist","constructor","this","parseSvg","parse","pathologist"],"mappings":"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"}